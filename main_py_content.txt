# Sierra Leone Concert Association API Documentation

## 1. Introduction

We present the Sierra Leone Concert Association API, a RESTful backend service designed to manage the operations of a concert and theater association. This documentation provides a comprehensive overview of the API design, implementation, testing, and usage. Our team has developed this project as part of our Object-Oriented Programming Methods coursework, with the aim of delivering a robust and extensible system for managing plays, actors, tickets, directors, showtimes, seats, and associated pricing.

This document is structured as follows:
- **API Design**: Architectural overview, data models, and endpoint structure.
- **Implementation**: Technologies, frameworks, and coding standards employed.
- **Testing**: Methodology and evidence of successful API interactions.
- **Setup and Running Instructions**: Step-by-step guide to running the API locally.
- **API Reference**: Interactive documentation using Swagger/OpenAPI.

By following this documentation, users and developers will gain a clear understanding of how to interact with, extend, and maintain the API.

---

## 2. API Design

The API is organized around the following core resources:
- **Plays**: Represents theatrical productions.
- **Actors**: Individuals performing in plays.
- **Directors**: Individuals directing plays.
- **Showtimes**: Scheduled performances for plays.
- **Seats**: Seating arrangement for showtimes.
- **Showtime Prices**: Pricing for seats at specific showtimes.
- **Tickets**: Bookings made by customers for specific seats and showtimes.
- **Customers**: Users who can book tickets.

Each resource is exposed via a dedicated set of RESTful endpoints, supporting standard CRUD operations (Create, Read, Update, Delete) where appropriate. The API follows REST best practices by using clear, descriptive URIs, appropriate HTTP methods, and meaningful response codes.

### Example Endpoint Structure
- `/plays/` – Manage plays (GET, POST, PUT, DELETE)
- `/actors/` – Manage actors (GET, POST, PUT, DELETE)
- `/directors/` – Manage directors (GET, POST, PUT, DELETE)
- `/showtimes/` – Manage showtimes (GET, POST, PUT, DELETE)
- `/seats/` – Manage seats (GET, POST, PUT, DELETE)
- `/showtime-prices/` – Manage seat pricing for showtimes (GET, POST, PUT, DELETE)
- `/tickets/` – Manage ticket bookings (GET, POST, DELETE)
- `/customers/` – Manage customer accounts (GET, POST, PUT, DELETE)

The API also includes authentication and authorization mechanisms to restrict access to sensitive operations (e.g., only administrators can create or delete plays, actors, directors, etc.).

---

## 3. Implementation

In developing this API, we have adopted industry-standard technologies and best practices to ensure maintainability, scalability, and security. Below, we outline the key components and architectural choices that define our implementation.

### 3.1 Technology Stack
- **Programming Language:** Python 3.x
- **Web Framework:** FastAPI
- **ORM:** SQLAlchemy
- **Database:** SQLite (for development and demonstration)
- **Authentication:** OAuth2 with JWT tokens
- **API Documentation:** Swagger/OpenAPI (auto-generated by FastAPI)
- **Frontend:** (Located in the `frontend/` directory; not detailed in this backend documentation)

### 3.2 Project Structure
The backend codebase is organized as follows:
- `main.py` – FastAPI application entry point, middleware, and router registration
- `database.py` – Database engine and session management
- `models.py` – SQLAlchemy models for all entities
- `schemas/` – Pydantic schemas for request/response validation per entity
- `crud/` – CRUD logic for each entity
- `routes/` – API route definitions for each resource (plays, actors, etc.)
- `auth/` – Authentication and authorization utilities

### 3.3 Key Implementation Features
- **Modular Routing:** Each resource (e.g., plays, actors) is managed by its own router module, promoting separation of concerns and easier maintenance.
- **Dependency Injection:** FastAPI's dependency injection system is used for database sessions and authentication, ensuring clean and testable code.
- **Role-Based Access Control:** Administrative actions are protected by role checks, with custom dependencies enforcing access policies.
- **Error Handling:** Consistent use of HTTP exceptions for error reporting, providing clear feedback to API consumers.
- **CORS Support:** Configured to allow cross-origin requests for local development and integration with the frontend.

---


4. Testing
To ensure the reliability and correctness of our API, we have adopted a systematic approach to testing. Our testing process covers all major endpoints and functionalities, leveraging both manual and automated tools to validate expected behaviors.

4.1 Testing Tools and Approach
Postman: We use Postman to manually test each API endpoint, verifying request/response formats, status codes, and error handling.
Automated Testing (Optional): For larger projects or CI/CD pipelines, we recommend using pytest with httpx or FastAPI’s built-in testing utilities to automate endpoint validation.
4.2 Test Coverage
We have tested the following aspects:

CRUD operations for all core resources (plays, actors, directors, showtimes, seats, showtime prices, tickets, customers)
Authentication and authorization flows (login, protected endpoints)
Error handling for invalid requests and permissions
CORS and integration with the frontend
4.3 Providing Evidence
To demonstrate successful testing, we have included:

Screenshots: Captures of successful API requests and responses in Postman (see appendix or attached files)
Logs: Server-side logs showing endpoint access and error handling
Example: Testing a GET Request in Postman
Select the desired endpoint (e.g., GET /plays/).
Click "Send" and verify a 200 OK response with the expected data format.
Repeat for POST, PUT, DELETE, and protected endpoints as needed.
We encourage future maintainers to continue using these tools and methodologies to ensure ongoing API quality as the project evolves.

5. Setup and Running Instructions
To help users and developers run the Sierra Leone Concert Association API locally, we provide the following step-by-step guide. This ensures that anyone can set up the environment, install dependencies, and start the backend server with ease.

5.1 Prerequisites
Python 3.8+ must be installed on your system.
(Optional) Virtual Environment tools such as venv or virtualenv are recommended.
5.2 Installation Steps
Clone the Repository
git clone <your-repo-url>
cd <project-directory>
Set Up a Virtual Environment (Recommended)
python -m venv .venv
# On Windows:
.venv\Scripts\activate
# On Mac/Linux:
source .venv/bin/activate
Install Python Dependencies
pip install -r requirements.txt
Set Up the Database
The API uses SQLite by default. On first run, the database file will be created automatically.
Run the FastAPI Server
uvicorn backend.main:app --reload
The API will be available at http://127.0.0.1:8000/.
5.3 Accessing the API Documentation
Open your browser and navigate to:
Swagger UI: http://127.0.0.1:8000/docs
ReDoc: http://127.0.0.1:8000/redoc
5.4 Environment Variables (If Any)
If your project uses environment variables (e.g., for secret keys), document them here. Otherwise, you may skip this step.
5.5 Running the Frontend
If you wish to run the frontend, refer to the frontend/ directory and its README or setup instructions.

---

## 6. API Reference (Swagger/OpenAPI)

Our API is fully documented and explorable using the automatically generated Swagger (OpenAPI) UI provided by FastAPI. This interactive documentation allows users, developers, and testers to:
- View all available endpoints, request/response models, and authentication requirements.
- Try out API requests directly from the browser interface.
- Inspect example payloads and responses for every route.

### 6.1 Accessing the Documentation
- **Swagger UI:** [http://127.0.0.1:8000/docs](http://127.0.0.1:8000/docs)
- **ReDoc:** [http://127.0.0.1:8000/redoc](http://127.0.0.1:8000/redoc)

### 6.2 How to Use
1. Launch the FastAPI server locally as described above.
2. Open your browser and navigate to the Swagger UI link.
3. Browse through the endpoints, models, and authentication flows.
4. Use the "Authorize" button to authenticate (if required), and test endpoints interactively.

### 6.3 Example Endpoints
- `GET /plays/` – Retrieve a list of all plays.
- `POST /tickets/` – Book a ticket for a customer.
- `DELETE /seats/{row_no}/{seat_no}` – Remove a seat (admin only).

For a complete and always up-to-date reference, please use the Swagger UI or ReDoc interface. These tools ensure that all changes to the API are instantly reflected in the documentation.

---

## 7. Conclusion

We, as a team, have designed, implemented, and thoroughly tested the Sierra Leone Concert Association API to provide a reliable and extensible platform for managing concert and theater operations. This documentation is intended to guide future users and developers in understanding, deploying, and extending the system. We encourage collaborative improvement and welcome feedback to further enhance the project.
